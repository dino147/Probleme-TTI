import numpy as np


def ex1():
    """ Ex1
    Scriet, i un program care afis,ează vectorul de probabilităt, i după 7 iterat, ii, considerând un
    vector de probabilităt, i init, iale P
    (0) citit de la tastatură.
    """
    T = [[0.25, 0.5, 0.25],
         [0.5, 0.25, 0.25],
         [0.25, 0.25, 0.5]]

    P = np.asanyarray(list(map(float, input().split(' '))))

    # for i in range(0, 7):
    #    P = P @ T
    # print(P)

    P = P @ np.linalg.matrix_power(T, 7)  # P inmultit cu matricea T la puterea a 7-a

    print(P)


def ex2():
    """
    Scriet, i un program care afis,ează cu ce probabilitate a fost transmis al doilea simbol după
    5 iterat, ii, considerând variabila p citită de la tastatură
    """

    P = np.asarray([1.0, 0.0, 0.0])
    p1 = float(input())  # citire float
    T = np.asanyarray([[p1, 1 - 2 * p1, p1],
                       [1 - 2 * p1, p1, p1],
                       [p1, p1, 1 - 2 * p1]])

    # print(T)
    # for i in range(0, 5):
    #    P = P @ T

    P = P @ np.linalg.matrix_power(T, 5)

    print(P[1])


def ex3():
    """afisati, i o listă cu probabilităt, ile corespunzătoare stării 3 pentru 8 iterat, ii consecutive,
    considerând un vector de probabilităt, i init, iale P
    (0) citit de la tastatură"""
    T = np.asanyarray([[0.01, 0.98, 0.01],
                       [0.98, 0.01, 0.01],
                       [0.01, 0.01, 0.98]])

    P = np.asanyarray(list(map(float, input().split(' '))))

    lista = []

    for i in range(1, 9):
        P = P @ np.linalg.matrix_power(T, i)
        lista.append(P[2])

    # print(lista)
    print(' '.join([F'{x:.3f}' for x in lista]))


def ex4():
    N, K = map(int, input().split(' '))

    T = np.asanyarray([list(map(float, input().split(' '))) for i in range(K)])
    P = np.ones(K)
    P = P / K

    for i in range(N):
        Paux = P
        P = P @ T
        # print("P ", P)
        # print("Paux", Paux)
        Paux = P - Paux
        # print("diferenta: ", Paux)
        if abs(Paux.any()) < 0.001:
            return True

    return False
    # print(P)


# print(ex4())


def ex7partial(ntranz):
    T = [[0.75, 0.25],
         [0.25, 0.75]]

    P = np.asanyarray(list(map(float, input().split(' '))))
    T1 = np.linalg.matrix_power(T, ntranz)
    print(T1)
    P = P @ T1

    return P




print(ex7partial(2))
